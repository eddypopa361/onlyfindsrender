Urgent fixes + migration to Supabase (single source of truth)

Fix “Login Failed – Supabase not configured”

Ensure env vars exist and are loaded:

Client (Vite): VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY

Server (Node): SUPABASE_URL, SUPABASE_SERVICE_ROLE

In the admin code, add a guard that surfaces a clear message if these are missing (don’t just fail silently).

Verify the client uses import.meta.env.VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY.

Verify any server code uses process.env.SUPABASE_URL / SUPABASE_SERVICE_ROLE.

Stop using the current (Replit) DB entirely

Migrate the entire products dataset to Supabase and point all admin CRUD to Supabase only.

Create Supabase schema (mirror current fields):

products: id uuid pk default gen_random_uuid(), title text not null, priceUSD numeric, image text, buyUrl text, category text, subCategory text, featured boolean default false, carousel boolean default false, created_at timestamptz default now(), updated_at timestamptz default now().

Add trigger to auto-update updated_at.

admins: id uuid primary key (stores auth.uid() of admins).

Generate supabase_schema.sql with table + trigger DDL.

Row Level Security (RLS)

Enable RLS on both tables.

Policies in supabase_policies.sql:

products:

select: allow only if auth.uid() is in admins (for now; we are not changing public frontend, so we can keep products private).

insert/update: allow only when auth.uid() in admins.

admins: only admins can select/insert/delete.

Output a short README snippet on how to apply the SQL in Supabase.

Data migration script (from old DB → Supabase)

Create scripts/migrate_to_supabase.ts:

Reads from old DB via OLD_DB_URL (Node pg).

Writes to Supabase via SUPABASE_SERVICE_ROLE using @supabase/supabase-js.

Upserts on id (if old DB has IDs; otherwise generate stable UUIDs).

Maps existing columns 1:1 to the new schema.

Add npm run migrate:supabase script in package.json.

After migration, remove all reads/writes to the old DB from the codebase (admin uses Supabase only). Add a feature flag USE_SUPABASE_ONLY=true that hard-fails if false.

Admin auth + authorization

/admin uses Supabase Email+Password login (Auth UI we already built).

After login, check admins table: if auth.uid() exists → allow access; else show friendly 403 + logout.

Add a tiny “whoami” widget (shows email + sign out).

If needed for server-side upserts/imports, use SUPABASE_SERVICE_ROLE. If you require it, ask me for the key.

Admin features (keep public site unchanged)

Keep the existing bulk import features but point them to Supabase:

CSV import (products)

ZIP images intake (unchanged paths on disk if applicable)

Add a Products tab with:

Paginated list + search by title/buyUrl

Edit drawer: title, priceUSD, buyUrl, image

“Add product” (same fields)

Client-side validation + toasts

Add a Help tab (English): brief how-to on CSV/ZIP, fields, and image paths.

Do NOT change any public pages/routes or the public build. Admin lives at /admin only.

Config & docs

Create README_ADMIN.md with:

Required env vars (client/server)

How to apply supabase_schema.sql and supabase_policies.sql

How to seed the first admin: insert into admins(id) values ('<auth uid>');

How to run npm run migrate:supabase

Add a visible error if envs are missing, with exact variable names to supply.

QA checklist

Missing envs → friendly error with which vars to add.

Login works; non-admin sees 403 + logout.

Products list loads from Supabase.

Edit/add product writes to Supabase and shows success toasts.

Bulk CSV import inserts into Supabase.

ZIP images flow unchanged and still resolves for the site.

No code paths hit the old DB anymore.

Public site unaffected.

Keys I will provide if needed:
SUPABASE_URL, SUPABASE_ANON_KEY, and if required for server-side operations SUPABASE_SERVICE_ROLE.

Please implement, migrate all data, switch admin to Supabase-only, and fix the Supabase config error.